<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>实现SSE(Server-Sent Event) 推送事件</title>
    <url>/2021/03/26/SSE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <div id="aplayer-pOqpPeAZ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-pOqpPeAZ"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "夕颜",
              author: "能登麻美子",
              url: "https://webfs.yun.kugou.com/202103291707/0b3aa3094c8695eed450ce8ebc4c1d69/G192/M0B/01/09/oJQEAF5jgkaACq5GACWUUsRkcA8783.mp3",
              pic: "https://imgessl.kugou.com/uploadpic/softhead/400/20140411/20140411182558407258.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
<h2 id="前端做的准备工作"><a href="#前端做的准备工作" class="headerlink" title="前端做的准备工作"></a>前端做的准备工作</h2><h3 id="前端新建的EventSource对象请求一个sse，监听这个对象的message事件，然后再接收后端发送过来的消息"><a href="#前端新建的EventSource对象请求一个sse，监听这个对象的message事件，然后再接收后端发送过来的消息" class="headerlink" title="前端新建的EventSource对象请求一个sse，监听这个对象的message事件，然后再接收后端发送过来的消息"></a>前端新建的EventSource对象请求一个sse，监听这个对象的message事件，然后再接收后端发送过来的消息</h3><h3 id="当后端支付成功后，这边会自动监听这个事件的状态"><a href="#当后端支付成功后，这边会自动监听这个事件的状态" class="headerlink" title="当后端支付成功后，这边会自动监听这个事件的状态"></a>当后端支付成功后，这边会自动监听这个事件的状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;判断浏览器是否支持SSE</span><br><span class="line">if (&#39;EventSource&#39; in window) &#123;</span><br><span class="line">    &#x2F;&#x2F;监控支付状态</span><br><span class="line">    var source &#x3D; new EventSource(&#39;&#x2F;sse&#x2F;orderPush&#x2F;&#39; + orderId);</span><br><span class="line">    source.addEventListener(&#39;message&#39;, function (evt) &#123;</span><br><span class="line">        var data &#x3D; JSON.parse(evt.data);</span><br><span class="line">        if (data.code &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">            source.close();</span><br><span class="line">            &#x2F;&#x2F;支付成功后的操作</span><br><span class="line">            checkPayResult(orderId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, false);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="后端做的准备工作"><a href="#后端做的准备工作" class="headerlink" title="后端做的准备工作"></a>后端做的准备工作</h2><h3 id="后端接收到前端的请求，会返回一个SseEmitter对象，如果后续后台有在这个对象上send，则会被监听到该状态"><a href="#后端接收到前端的请求，会返回一个SseEmitter对象，如果后续后台有在这个对象上send，则会被监听到该状态" class="headerlink" title="后端接收到前端的请求，会返回一个SseEmitter对象，如果后续后台有在这个对象上send，则会被监听到该状态"></a>后端接收到前端的请求，会返回一个SseEmitter对象，如果后续后台有在这个对象上send，则会被监听到该状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;sse&quot;)</span><br><span class="line">public class SseController &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private PayCompletedListener payCompletedListener;</span><br><span class="line"></span><br><span class="line">    @GetMapping(path &#x3D; &quot;&#x2F;orderPush&#x2F;&#123;orderId&#125;&quot;, produces &#x3D; MediaType.TEXT_EVENT_STREAM_VALUE)</span><br><span class="line">    public SseEmitter orderPush(@PathVariable String orderId) &#123;</span><br><span class="line">        final SseEmitter emitter &#x3D; new SseEmitter();</span><br><span class="line">        try &#123;</span><br><span class="line">            payCompletedListener.addSseEmitters(orderId, emitter);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            emitter.completeWithError(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return emitter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="储存SseEmitter和监听"><a href="#储存SseEmitter和监听" class="headerlink" title="储存SseEmitter和监听"></a>储存SseEmitter和监听</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class PayCompletedListener &#123;</span><br><span class="line">    private static Map&lt;String, SseEmitter&gt; sseEmitters &#x3D; new Hashtable&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">    * 储存SseEmitter</span><br><span class="line">    * @param orderId 订单id</span><br><span class="line">    * @param sseEmitter SseEmitter</span><br><span class="line">    *&#x2F;</span><br><span class="line">    public void addSseEmitters(String orderId, SseEmitter sseEmitter) &#123;</span><br><span class="line">        sseEmitters.put(orderId, sseEmitter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">    * 负责监听事件</span><br><span class="line">    *</span><br><span class="line">    * @param payCompletedEvent 事件对象</span><br><span class="line">    * @throws IOException</span><br><span class="line">    *&#x2F;</span><br><span class="line">    @EventListener</span><br><span class="line">    public void deployEventHandler(PayCompletedEvent payCompletedEvent) throws IOException &#123;</span><br><span class="line">        String orderId &#x3D; payCompletedEvent.getOrderId();</span><br><span class="line">        SseEmitter sseEmitter &#x3D; sseEmitters.get(orderId);</span><br><span class="line">        sseEmitter.send(R.ok(&quot;支付成功!&quot;));</span><br><span class="line">        sseEmitter.complete();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="每次事件的对象"><a href="#每次事件的对象" class="headerlink" title="每次事件的对象"></a>每次事件的对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">public class PayCompletedEvent extends ApplicationEvent &#123;</span><br><span class="line">    private String orderId;</span><br><span class="line"></span><br><span class="line">    public PayCompletedEvent(Object source, String orderId) &#123;</span><br><span class="line">        super(source);</span><br><span class="line">        this.orderId &#x3D; orderId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在支付成功后，则通知"><a href="#在支付成功后，则通知" class="headerlink" title="在支付成功后，则通知"></a>在支付成功后，则通知</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;发送sse通知已经支付成功了</span><br><span class="line">applicationContext.publishEvent(new PayCompletedEvent(this, orderId));</span><br></pre></td></tr></table></figure>
<p><img src="/images/wz/pkq.jpg"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SSE</tag>
      </tags>
  </entry>
  <entry>
    <title>初遇</title>
    <url>/2021/03/05/%E5%88%9D%E9%81%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <div id="aplayer-zLANEQCL" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-zLANEQCL"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "歳月-雲流れ-",
              author: "Foxtail-Grass Studio",
              url: "https://webfs.yun.kugou.com/202103291633/5ecce53366bf62021f9b968ecacede8a/G091/M07/11/15/-4YBAFiG1IuARB3iAB8FZEUhxm0561.mp3",
              pic: "https://imgessl.kugou.com/stdmusic/20200812/20200812155440976736.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>

<p>这里是Rainminmin，其实是Rainmin，后来发现被人给注册了(ಥ﹏ಥ)<br>我是一名java开发工程师(｡◕ˇ∀ˇ◕)，却喜欢研究前端一些小东西。<br>喜欢动漫、游戏、纯音乐(什么类型的都喜欢)。<br>平时会打LOL，一起打的加我ヾ(◍°∇°◍)ﾉﾞ，祖安:Mr丶斯维因<br>,’’’╭⌒╮⌒╮.’,’’’,,’,.’’,,’,’’,.<br>  ╱  ◥██◣’’o’,’’’,,’,.’’.’’,,’,.<br>｜田｜田田│ ‘’,,’,.’,’’’,,’,.’’<br>╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬</p>
<a id="more"></a>
<p><img src="/images/wz/cs_xd.png"></p>
]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>初遇</tag>
      </tags>
  </entry>
</search>
